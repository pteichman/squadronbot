#!/usr/bin/env python

import fileinput
import random
import re

def main():
    lines = []
    for line in fileinput.input():
        lines.append(line.strip().upper())

    # Restrict ourselves to the characters in glyphs.png.
    lines = [line for line in lines if re.match(r"[-A-Z.' ]+$", line)]

    # Learn the trigram model.
    model = learn(lines)

    # render only has room for 15 letters in a name.
    names = [line for line in lines if len(line) < 16]

    for _ in range(22):
        oldname = random.choice(names)
        newname = fix(model, oldname)
        print(newname)


def learn(lines):
    model = {}
    for line in lines:
        line = " " + line + " "
        for i in range(0, len(line)-3):
            trigram = line[i:i+3]
            index = trigram[0] + chartype(trigram[1]) + trigram[2]

            value = model.get(index, "")
            if trigram[1] not in value:
                model[index] = "".join(sorted(value + trigram[1]))

    return model


def chartype(c):
    if c in "AEIOUY":
        return "v"
    if c in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
        return "c"
    return c



def fix(model, name):
    name = " " + name + " "

    trigrams = []
    for i in range(len(name)-2):
        trigrams.append(name[i:i+3])

    while True:
        index = random.randint(0, len(trigrams)-1)
        trigram = trigrams[index]

        key = trigram[0] + chartype(trigram[1]) + trigram[2]
        if key not in model:
            continue
        options = model[key]

        choice = random.choice(options)
        if choice == trigram[1]:
            continue

        newtrigram = trigram[0] + choice + trigram[1]
        trigrams[index] = newtrigram

        return "".join(trigram[1] for trigram in trigrams)


if __name__ == "__main__":
    main()
